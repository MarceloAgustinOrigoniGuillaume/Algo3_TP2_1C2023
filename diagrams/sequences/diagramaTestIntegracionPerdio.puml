@startuml
Actor "usuario/test" as sis
participant ":Coordenada" as coord
participant ":Juego" as juego
participant ":EstadoJugando" as stateJ
participant ":Turno" as turno

group inicializacion juego 
sis -> juego: Juego(pathMapa,pathEnemigos)
activate juego


juego --> sis: juego
deactivate juego
end

sis -> juego : iniciarJuego()
activate juego

juego->stateJ: EstadoJugando(this)
activate stateJ

stateJ-> turno: Turno()
activate turno
turno-->stateJ: turno
deactivate turno

stateJ--> juego: estadoJugando
deactivate stateJ
juego->juego: cambiarEstado a estadoJugando


juego --> sis : void
deactivate juego

sis->sis: instanciarTorresYTrampa()

sis -> coord : Coordenada(15,15)
activate coord
coord --> sis : coord1
deactivate coord


sis -> coord : Coordenada(14,14)
activate coord
coord --> sis : coord2
deactivate coord

sis -> coord : Coordenada(5,3)
activate coord
coord --> sis : coord3
deactivate coord

sis -> juego : posicionar(torrePlateada, coord1)
activate juego
group posicionar cons=torrePlateada

end
juego-->sis:posiciono?
deactivate juego

sis -> juego : posicionar(torreBlanca, coord2)
activate juego
group posicionar cons=torreBlanca

end
juego-->sis:posiciono?
deactivate juego


sis -> juego : posicionar(trampa, coord3)
activate juego
group posicionar cons=trampa

end
juego-->sis:posiciono?
deactivate juego

sis->sis:assertCreditosJugadorEquals(45)

loop 11 veces
    sis->juego:pasarTurno()
    activate juego
    juego->stateJ: ejecutarEstado()
activate stateJ
    group pasarTurno, jugador sigue vivo
    end
    stateJ-->juego:void
deactivate stateJ


    juego-->sis:void
    deactivate juego
end

    sis->juego:pasarTurno()
    activate juego
    juego->stateJ: ejecutarEstado()
activate stateJ
    group pasarTurno, jugador murio
    end
    stateJ-->juego:void
deactivate stateJ
    juego-->sis:void
    deactivate juego

sis->sis:assertVidaJugadorEquals(0)
sis->sis:assertPerdioJugador()



@enduml